Index: core/src/com/mygdx/game/objects/Bounds2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- core/src/com/mygdx/game/objects/Bounds2.java	(revision 7196dcb4db5f3ff559cda7d4d7e2351a9d3e0d51)
+++ core/src/com/mygdx/game/objects/Bounds2.java	(revision )
@@ -14,8 +14,9 @@
 import com.badlogic.gdx.physics.box2d.Manifold;
 import com.badlogic.gdx.physics.box2d.PolygonShape;
 import com.badlogic.gdx.physics.box2d.World;
+import com.badlogic.gdx.scenes.scene2d.Actor;
 
-public class Bounds2 implements ContactFilter, ContactListener {
+public class Bounds2 extends Actor implements ContactFilter, ContactListener {
 
     private Body body;
     private Fixture fixture;
@@ -24,45 +25,69 @@
 
         BodyDef bodyDef = new BodyDef();
         FixtureDef fixtureDef = new FixtureDef();
-        float groundPos = -2.5f;
-        float topPos =7.5f;
-        float leftWall = -5f;
-        float rightWall =15f;
+        fixtureDef.density = 1;
 
+
+        float groundPos = -2.35f;
+        float topGroundPos = -2.5f;
+        float groundPos2 = -2.5f;
+        float topPos =7.35f;
+        float leftWall = -4.65f;
+        float rightWall =14.10f;
+
         // body definition
         bodyDef.type = BodyType.StaticBody;
-        bodyDef.position.set(0, groundPos);
+       bodyDef.position.set(0, topGroundPos);
 
         // ground shape
-        ChainShape groundShapeBottom = new ChainShape();
-        ChainShape groundShapeTop = new ChainShape();
+        ChainShape groundShareBottomLeft= new ChainShape();
+        ChainShape groundShareBottomRight = new ChainShape();
+
+        ChainShape groundShareTopRight = new ChainShape();
+        ChainShape groundShareTopLeft = new ChainShape();
+
         ChainShape groundShareRight = new ChainShape();
         ChainShape groundShareLeft = new ChainShape();
 
-		/*
-		groundShape.createChain(new Vector2[] {new Vector2(-10, groundPos), new Vector2(10,groundPos),
-				new Vector2(10, 8.35f), new Vector2(-10,8.35f), new Vector2(-10,groundPos)});
-		*/
 
-        groundShapeBottom.createChain(new Vector2[] {new Vector2(-10, groundPos), new Vector2(10,groundPos)});
-        groundShapeTop.createChain(new Vector2[] {new Vector2(-10, topPos), new Vector2(10,topPos)});
 
+        groundShareBottomLeft.createChain(new Vector2[] {new Vector2(-10, groundPos), new Vector2(-3.5f,groundPos)});
+        groundShareTopLeft.createChain(new Vector2[] {new Vector2(-10,topPos), new Vector2(-3.5f,topPos)});
+
+        groundShareBottomRight.createChain(new Vector2[] {new Vector2(3.5f, groundPos), new Vector2(10f,groundPos)});
+        groundShareTopRight.createChain(new Vector2[] {new Vector2(3.5f,topPos), new Vector2(10f,topPos)});
+
+
         groundShareRight.createChain(new Vector2[] {new Vector2(rightWall, -10), new Vector2(rightWall,10)});
         groundShareLeft.createChain(new Vector2[] {new Vector2(leftWall, -10), new Vector2(leftWall,10)});
 
         // fixture definition
-        fixtureDef.shape = groundShapeBottom;
+        fixtureDef.shape = groundShareBottomLeft;
 
         body = world.createBody(bodyDef);
         fixture = body.createFixture(fixtureDef);
 
         // fixture definition
-        fixtureDef.shape = groundShapeTop;
+        fixtureDef.shape = groundShareTopLeft;
 
         body = world.createBody(bodyDef);
         fixture = body.createFixture(fixtureDef);
 
 
+        // fixture definition
+        fixtureDef.shape = groundShareBottomRight;
+
+        body = world.createBody(bodyDef);
+        fixture = body.createFixture(fixtureDef);
+
+        // fixture definition
+        fixtureDef.shape = groundShareTopRight;
+
+        body = world.createBody(bodyDef);
+        fixture = body.createFixture(fixtureDef);
+
+
+
         bodyDef.position.set(leftWall,0 );
         // fixture definition
 
@@ -78,8 +103,8 @@
         fixture = body.createFixture(fixtureDef);
 
 
-        groundShapeTop.dispose();
-        groundShapeBottom.dispose();
+        groundShareTopLeft.dispose();
+        groundShareBottomLeft.dispose();
     }
 
     @Override
Index: core/src/com/mygdx/game/AirHockey.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- core/src/com/mygdx/game/AirHockey.java	(revision 7196dcb4db5f3ff559cda7d4d7e2351a9d3e0d51)
+++ core/src/com/mygdx/game/AirHockey.java	(revision )
@@ -64,7 +64,7 @@
 		menuScreen = new MenuScreen(this);
 		gameScreen = new PlayScreen(this);
 		gameOverScreen = new GameOverScreen(this);
-		setScreen(gameScreen);
+		setScreen(menuScreen);
 	}
 
 
Index: core/src/com/mygdx/game/screens/PlayScreen.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- core/src/com/mygdx/game/screens/PlayScreen.java	(revision 7196dcb4db5f3ff559cda7d4d7e2351a9d3e0d51)
+++ core/src/com/mygdx/game/screens/PlayScreen.java	(revision )
@@ -104,7 +104,7 @@
         camera2 = new OrthographicCamera(gameWidth, gameHeight);
 
             this.world = new World(new Vector2(0, 0), true);
-        bounds2 = new Bounds2(world);
+        //bounds2 = new Bounds2(world);
         // boundsGround = new BoundsGround(world);
         shapeRenderer = new ShapeRenderer();
 
@@ -131,7 +131,7 @@
         //Creaci√≥n de actores
         jugador1 = new Player(player, "Jugador 1", world);
         disk = new Disk(0, 0, disco, pista.getHeight() / 2, pista.getWidth() / 2, world);
-        pistaHockey = new Pista(pista, "pista");
+        pistaHockey = new Pista(pista, "pista", world);
         pistaHockey.setPosition(0, 0);
 
 
@@ -185,13 +185,15 @@
 
         force += 100f;
         module = Math.sqrt(force * force + 100f * 100f);
-        //  disk.getBody().applyForceToCenter((float) (module * Math.cos(angle)), (float) (module * Math.sin(angle)), true);
+          //disk.getBody().applyForceToCenter((float) (module * Math.cos(angle)), (float) (module * Math.sin(angle)), true);
         angle = 0;
 //
         stage.act(delta);
         stage.draw();
 
 
+
+        debugRenderer.render(world, camera2.combined);
         debugRenderer.render(world, camera.combined);
         /**
          System.out.println("Posicion del disco: " + disk.getBody().getPosition().x + ", " + disk.getBody().getPosition().y);
\ No newline at end of file
Index: core/src/com/mygdx/game/objects/Disk.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- core/src/com/mygdx/game/objects/Disk.java	(revision 7196dcb4db5f3ff559cda7d4d7e2351a9d3e0d51)
+++ core/src/com/mygdx/game/objects/Disk.java	(revision )
@@ -57,8 +57,6 @@
         // body definition
         bodyDef.type = BodyDef.BodyType.DynamicBody;
         bodyDef.position.set(getX(), getY());
-        bodyDef.linearDamping = 0.0f;
-        bodyDef.angularDamping = 0.0f;
 
         // ball shape
         CircleShape ballShape = new CircleShape();
@@ -70,11 +68,10 @@
         fixtureDef.shape = ballShape;
         fixtureDef.friction = 0;
         fixtureDef.restitution = 1;
-        fixtureDef.density = 1;
+        //fixtureDef.density = 0;
 
 
 
-
         body = world.createBody(bodyDef);
         fixture = body.createFixture(fixtureDef);
 
@@ -91,13 +88,14 @@
      * @param batch
      * @param parentAlpha
      */
-    @Override
+  /**  @Override
     public void draw(Batch batch, float parentAlpha) {
 
         Color color = getColor();
         batch.setColor(color.r, color.g, color.b, color.a * parentAlpha);
         System.out.println( body.getLinearVelocity());
         batch.draw(sprite, body.getPosition().x-sprite.getHeight()/2,body.getPosition().y-sprite.getWidth()/2 , getWidth(), getHeight());
+
 //        body.setTransform(getX(), getY(), 0);
     }
 
@@ -106,7 +104,7 @@
         setBounds(getX(), getY(), getWidth(), getHeight());
         circle.set(getX() + getWidth() / 2.0f, getY() + getWidth() / 2.0f, getWidth() / 2.0f);
     }
-
+**/
 
     //GETTERS
 
Index: core/src/com/mygdx/game/objects/Pista.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- core/src/com/mygdx/game/objects/Pista.java	(revision 7196dcb4db5f3ff559cda7d4d7e2351a9d3e0d51)
+++ core/src/com/mygdx/game/objects/Pista.java	(revision )
@@ -4,27 +4,124 @@
 import com.badlogic.gdx.graphics.Color;
 import com.badlogic.gdx.graphics.g2d.Batch;
 import com.badlogic.gdx.graphics.g2d.Sprite;
+import com.badlogic.gdx.math.Vector2;
+import com.badlogic.gdx.physics.box2d.Body;
+import com.badlogic.gdx.physics.box2d.BodyDef;
+import com.badlogic.gdx.physics.box2d.ChainShape;
+import com.badlogic.gdx.physics.box2d.Contact;
+import com.badlogic.gdx.physics.box2d.ContactFilter;
+import com.badlogic.gdx.physics.box2d.ContactImpulse;
+import com.badlogic.gdx.physics.box2d.ContactListener;
+import com.badlogic.gdx.physics.box2d.Fixture;
+import com.badlogic.gdx.physics.box2d.FixtureDef;
+import com.badlogic.gdx.physics.box2d.Manifold;
+import com.badlogic.gdx.physics.box2d.World;
 import com.badlogic.gdx.scenes.scene2d.Actor;
 
 /**
  * Created by MarcosPortatil on 16/05/2017.
  */
 
-public class Pista extends Actor {
+public class Pista extends Actor  implements ContactFilter, ContactListener {
 
     private Sprite sprite;
     private String name;
     private float posX, posY;
+    private Body body;
+    private Fixture fixture;
 
 
-    public Pista(Sprite sprite, String name) {
+    public Pista(Sprite sprite, String name, World world) {
         this.sprite = sprite;
         this.name = name;
         this.posX = sprite.getX();
         this.posY = sprite.getY();
         setBounds(sprite.getX(), sprite.getY(), sprite.getWidth(), sprite.getHeight());
 
+        BodyDef bodyDef = new BodyDef();
+        FixtureDef fixtureDef = new FixtureDef();
+        fixtureDef.density = 1;
 
+
+        float groundPos = -2.35f;
+        float topGroundPos = -2.5f;
+        float groundPos2 = -2.5f;
+        float topPos =7.35f;
+        float leftWall = -4.65f;
+        float rightWall =14.10f;
+
+        // body definition
+        bodyDef.type = BodyDef.BodyType.StaticBody;
+        bodyDef.position.set(0, topGroundPos);
+
+        // ground shape
+        ChainShape groundShareBottomLeft= new ChainShape();
+        ChainShape groundShareBottomRight = new ChainShape();
+
+        ChainShape groundShareTopRight = new ChainShape();
+        ChainShape groundShareTopLeft = new ChainShape();
+
+        ChainShape groundShareRight = new ChainShape();
+        ChainShape groundShareLeft = new ChainShape();
+
+
+
+        groundShareBottomLeft.createChain(new Vector2[] {new Vector2(-10, groundPos), new Vector2(-3.5f,groundPos)});
+        groundShareTopLeft.createChain(new Vector2[] {new Vector2(-10,topPos), new Vector2(-3.5f,topPos)});
+
+        groundShareBottomRight.createChain(new Vector2[] {new Vector2(3.5f, groundPos), new Vector2(10f,groundPos)});
+        groundShareTopRight.createChain(new Vector2[] {new Vector2(3.5f,topPos), new Vector2(10f,topPos)});
+
+
+        groundShareRight.createChain(new Vector2[] {new Vector2(rightWall, -10), new Vector2(rightWall,10)});
+        groundShareLeft.createChain(new Vector2[] {new Vector2(leftWall, -10), new Vector2(leftWall,10)});
+
+        // fixture definition
+        fixtureDef.shape = groundShareBottomLeft;
+
+        body = world.createBody(bodyDef);
+        fixture = body.createFixture(fixtureDef);
+
+        // fixture definition
+        fixtureDef.shape = groundShareTopLeft;
+
+        body = world.createBody(bodyDef);
+        fixture = body.createFixture(fixtureDef);
+
+
+        // fixture definition
+        fixtureDef.shape = groundShareBottomRight;
+
+        body = world.createBody(bodyDef);
+        fixture = body.createFixture(fixtureDef);
+
+        // fixture definition
+        fixtureDef.shape = groundShareTopRight;
+
+        body = world.createBody(bodyDef);
+        fixture = body.createFixture(fixtureDef);
+
+
+
+        bodyDef.position.set(leftWall,0 );
+        // fixture definition
+
+        fixtureDef.shape = groundShareLeft;
+
+        body = world.createBody(bodyDef);
+        fixture = body.createFixture(fixtureDef);
+
+        // fixture definition
+        fixtureDef.shape = groundShareRight;
+
+        body = world.createBody(bodyDef);
+        fixture = body.createFixture(fixtureDef);
+
+
+        groundShareTopLeft.dispose();
+        groundShareBottomLeft.dispose();
+
+
     }
 
     @Override
@@ -34,5 +131,30 @@
         batch.setColor(color.r, color.g, color.b, color.a * parentAlpha);
 
         batch.draw(sprite, 0, 0, sprite.getWidth(), sprite.getHeight());
+    }
+
+    @Override
+    public boolean shouldCollide(Fixture fixtureA, Fixture fixtureB) {
+        return false;
+    }
+
+    @Override
+    public void beginContact(Contact contact) {
+
+    }
+
+    @Override
+    public void endContact(Contact contact) {
+
+    }
+
+    @Override
+    public void preSolve(Contact contact, Manifold oldManifold) {
+
+    }
+
+    @Override
+    public void postSolve(Contact contact, ContactImpulse impulse) {
+
     }
 }
\ No newline at end of file
